#+STARTUP: show2levels
* Code
** Establish Lexical Binding
I thought something more elaborate was necessary to get this in my
config. It turns out you can tangle this comment into your config
directly. At least I became more proficient at Elisp writing the more
elaborate solution.

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp
  (defun send-zero ()
      (let ((zero 0))
	(lambda ()
	  zero)))

  (condition-case nil
      (progn
	(fset 'fn (send-zero))
	(fn))
    (error
     (message
      "Oops, lexical binding isn't enabled in the tangled output of this config.
  To fix, add

  ;; -*- lexical-binding: t -*-

  as the first line of the first source block in this file.")))

#+end_src

** Setting and Loading Emacs' Customize Settings
#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "emacs-custom.el"))
  (load custom-file)
#+end_src

** The "Remark" Macro
Once in a while I need this to

1. Add S-expression-level comments.
2. Comment out S-expressions.

#+begin_src emacs-lisp
  (cl-defmacro remark (docstring &rest body &key (active t) &allow-other-keys)
    "Add a comment to some S-expression.

  If ACTIVE, execute the surrounded form. Else, comment the form
  out."
    (when active
      `(progn ,@body)))
#+end_src

** Unset Some Nuisance Keys
*** Laptop Web Navigation Keys
#+begin_src emacs-lisp
  (global-unset-key (kbd "<XF86Back>"))
  (global-unset-key (kbd "<XF86Forward>"))
#+end_src
*** Windowing Environment Minimization
I may choose to rebind this to something else in the future, but for
now let's prevent ourselves from accidentally using it. While
non-fatal, it's a bit distracting to have your window suddenly
minimize on you.

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
#+end_src

** Make Sure Emacs Knows Where To Find Nvm-Installed Node
Org Babel needs this to find Node when evaluating JS (Node).

#+begin_src emacs-lisp
  (let ((path (getenv "PATH"))
	(nvm-path "~/.nvm/versions/node/v18.12.1/bin"))
    (setenv "PATH" (format "%s:%s" nvm-path path)))
#+end_src

** Visiting Links to Files under Version Control
Don't halt with a yes/no prompt, simply allow and alert us in the
minibuffer.

Even if we set this switch, a problem remains: startup Emacs doesn't
see this switch just yet, and so we must respond "Yes" each time to a
GUI-widget prompt offered to us by Emacs.

#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

** Bookmarks
*** Don't Use Fringe Markers
#+begin_src emacs-lisp
  (setq bookmark-set-fringe-mark nil)
#+end_src

** Setting Up the Package System
*** Add Melpa, and Initialize
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

*** Bootstrap Use Package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

** Installed Packages
*** Paredit
#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :hook (emacs-lisp-mode lisp-interaction-mode))
#+end_src

*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src

*** Web Mode
#+begin_src emacs-lisp :noweb yes
  (use-package web-mode
    :ensure t
    :mode "\\.html\\'"
    :bind ("C-c !" . #'bci/activate-web-project)
    :config
    <<web-mode-config>>)
#+end_src

*** Simple Httpd
#+begin_src emacs-lisp
  (use-package simple-httpd
    :ensure t)
#+end_src

*** Emmet Mode
#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :after web-mode
    :hook web-mode)
#+end_src

*** Js2 Mode
#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t)
#+end_src

*** Vterm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src

*** Impatient Showdown
#+begin_src emacs-lisp
  (use-package impatient-showdown
    :ensure t)
#+end_src

*** Sudo Edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t)
#+end_src
** Builtin Packages
*** Org
#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-src-window-setup 'current-window))
#+end_src

**** Org Tempo
It's just /so much easier/ to use ~<s~ to set up a source block,
rather than have to rely on ~C-c C-,~; which, while more general, is
in many cases overkill and ultimately more cumbersome.

#+begin_src emacs-lisp
  (use-package org-tempo
    :after org)
#+end_src

*** Vertico
At first I was skeptical of this package; it looked way too overblown
and complicated. But as I was having an issue with Ido, I decided to
try this one out. So far so good, what can I say.

**** Vertico "Base"
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    :config
    (vertico-multiform-mode)
    (setq vertico-multiform-categories
	  '((file grid)
	    (buffer grid))))
#+end_src

**** Vertico Directory
This starts to make Vertico feel more like Ido when using ~C-x
C-f~. Somre goodies are missing, for example, '//' to go to the root
directory, and '~/' to go to my home directory.

#+begin_src emacs-lisp
  (use-package vertico-directory
    :after vertico
    :bind (:map vertico-map
		("RET" . #'vertico-directory-enter)
		("DEL" . #'vertico-directory-delete-word)))
#+end_src

** Utils
*** Web Mode
**** Enable Current HTML File As a Web Project
#+begin_src emacs-lisp :tangle no :noweb-ref web-mode-config
  (defun bci/activate-web-project ()
    (interactive)
    (httpd-start)
    (setq httpd-root default-directory)
    (message "Current web project is now locally hosted!"))
#+end_src

*** Generic
**** Toggle Activating the Region
#+begin_src emacs-lisp
  (defun bci/toggle-activate-mark ()
  (interactive)
  (if (region-active-p)
      (deactivate-mark)
    (activate-mark)))

  (bind-key "C-`" #'bci/toggle-activate-mark)
#+end_src
