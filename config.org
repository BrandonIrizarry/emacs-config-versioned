* Code
** Establish Lexical Binding
I thought something more elaborate was necessary to get this in my
config. It turns out you can tangle this comment into your config
directly. At least I became more proficient at Elisp writing the more
elaborate solution.

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+end_src

** The "Remark" Macro
Once in a while I need this to

1. Add S-expression-level comments.
2. Comment out S-expressions.

#+begin_src emacs-lisp
  (cl-defmacro remark (docstring &rest body &key (active t) &allow-other-keys)
    "Add a comment to some S-expression.

  If ACTIVE, execute the surrounded form. Else, comment the form
  out."
    (when active
      `(progn ,@body)))
#+end_src

** The Rest
#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "emacs-custom.el"))
  (load custom-file)



  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (use-package emacs-utils
    :bind ("C-`" . #'bci/toggle-activate-mark)
    :load-path "utils/"
    :init
    (global-unset-key (kbd "<XF86Back>"))
    (global-unset-key (kbd "<XF86Forward>"))

    (remark "Not sure we need this anymore."
      :active t
      (let ((path (getenv "PATH"))
	    (nvm-path "~/.nvm/versions/node/v18.12.1/bin"))
	(setenv "PATH" (format "%s:%s" nvm-path path)))))

  (use-package paredit
    :ensure t
    :hook (emacs-lisp-mode lisp-interaction-mode))

  (use-package magit
    :ensure t)

  (use-package web-mode
    :ensure t
    :mode "\\.html\\'")

  (use-package simple-httpd
    :ensure t)

  (use-package bci-web-mode-utils
    :after (web-mode simple-httpd)
    :load-path "utils/"
    :bind ("C-c !" . #'bci/activate-html-css-javascript))

  (use-package emmet-mode
    :ensure t
    :after web-mode
    :hook web-mode)

  (use-package js2-mode
    :ensure t)

  (use-package vterm
    :ensure t)

  (use-package impatient-showdown
    :ensure t)
#+end_src
